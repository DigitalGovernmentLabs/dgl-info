name: server

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_public_key: ${{ secrets.PUBLIC_KEY }}
      TF_VAR_private_key: ${{ secrets.GH_PAGES_DEPLOY }}
      TF_VAR_ssl_certificate: ${{ secrets.SSL_CERTIFICATE }}
      TF_VAR_ssl_certificate_key: ${{ secrets.SSL_CERTIFICATE_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: terraform setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.0
      - run: terraform 0.13upgrade
        working-directory: server/terraform
      - id: init
        run: terraform init
        working-directory: server/terraform
      - id: fmt
        run: terraform fmt -check
        working-directory: server/terraform
      - id: plan
        run: terraform plan -no-color
        working-directory: server/terraform
        if: github.event_name == 'pull_request'
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            })
      - if: steps.plan.outcome == 'failure'
        run: exit 1
      - id: apply
        run: terraform apply -auto-approve -no-color
        working-directory: server/terraform
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Add key to allow access to server
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          echo "${{ secrets.GH_PAGES_DEPLOY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat <<EOT >> ~/.ssh/config
          Host dgl.jp
          HostName ${{ secrets.SSH_HOST }}
          User ec2-user
          IdentityFile ~/.ssh/id_rsa
          EOT
      - run: |
          ssh dgl.jp <<EOC
          cd dgl-info/server
          git pull origin master
          cat <<END_OF_SERVER_ENV > .env
          ${{ secrets.SERVER_ENV }}
          END_OF_SERVER_ENV
          docker-compose up -d --build
          EOC
